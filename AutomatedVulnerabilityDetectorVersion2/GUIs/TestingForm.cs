using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.OleDb;
using AutomatedVulnerabilityDetectorVersion2.Classes.Web;
using AutomatedVulnerabilityDetectorVersion2.Classes.Scanning;
using System.Threading;

namespace AutomatedVulnerabilityDetectorVersion2.GUIs
{
    public partial class TestingForm : Form
    {
        public int _testID;
        public bool _isNew;
        private SiteScanner scanner;
        public Thread scanThread;

        public TestingForm(int testId,bool isNew)
        {
            this._testID = testId;
            this._isNew = isNew;
            bool xss, sql, rfi, deepScan;
            using (OleDbConnection con = new OleDbConnection(SharedVariables.myConnectionString))
            {
                con.Open();
                using (OleDbCommand cmd = new OleDbCommand("SELECT * FROM `profile` WHERE `profileID` = ?", con))
                {
                    cmd.Parameters.AddWithValue("?",this._testID);
                    using (OleDbDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            xss = dr.GetBoolean(2);
                            sql = dr.GetBoolean(3);
                            rfi = dr.GetBoolean(4);
                            deepScan = dr.GetBoolean(5);
                            scanner = new SiteScanner(this._testID, xss, sql, rfi, deepScan);
                        }
                    }
                }
            }
            InitializeComponent();
            timer1_Tick(this,new EventArgs());
            refreshExploits();
        }

        private void TestingForm_Load(object sender, EventArgs e)
        {
            stopButton_Click(sender, e);
            refreshExploits();
        }

        public void refreshExploits()
        {
            if (this.dataGridView1.InvokeRequired)
            {
                Action action = () =>
                {
                    this.exploitTableAdapter.Connection.ConnectionString = SharedVariables.myConnectionString;
                    this.aVD2_DBDataSet.exploit.Clear();
                    this.exploitTableAdapter.Fill(this.aVD2_DBDataSet.exploit, this._testID);
                    this.dataGridView1.Refresh();
                };
                activitiesWindow.Invoke(action);
            }
            else
            {
                this.exploitTableAdapter.Connection.ConnectionString = SharedVariables.myConnectionString;
                this.aVD2_DBDataSet.exploit.Clear();
                this.exploitTableAdapter.Fill(this.aVD2_DBDataSet.exploit, this._testID);
                this.dataGridView1.Refresh();
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
                stopButton_Click(sender, e);
                if (currentThreadLabel.Text.ToLower() != "ready".ToLower())
                {
                    MessageBox.Show("the scanning thread is stopping .. please wait!");
                    return;
                }
                
                //close me
                //show main
                SharedVariables.myMainForm.Show();
                SharedVariables.myTestingForm = null;
                this.Close();
                this.Dispose();
        }




        

        private void button2_Click(object sender, EventArgs e)
        {
            if (currentThreadLabel.Text.ToLower() != "ready".ToLower())
            {
                MessageBox.Show("the scanning thread is stopping .. please wait!");
                return;
            }
                // notify the user if there is no internet connection
                // in case of start/continue only.
                if (!Utilities.IsConnectedToInternet())
                {
                    DialogResult x = MessageBox.Show("There is no internet access Would you like to continue anyway ? \n\r (if you are testing a local website click \"yes\")", "warnning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (x == System.Windows.Forms.DialogResult.No)
                    {
                        return;
                    }
                }
   
                if (startButton.InvokeRequired || this.InvokeRequired || stopButton.InvokeRequired)
                {
                    Action action = () =>
                    {
                        startButton.Enabled=false;
                        closeButton.Enabled = false;
                        stopButton.Enabled = true;
                    };
                    this.Invoke(action);
                }
                else
                {
                    startButton.Enabled=false;
                    closeButton.Enabled = false;
                    stopButton.Enabled = true;
                }

                //start code here
                scanner.start();
            }

       
        //display new output message to activity window
        public void displayOutputActivity(string msg)
        {
            if (activitiesWindow.InvokeRequired)
            {
                Action action = () =>
                {
                    activitiesWindow.Text += DateTime.Now.ToLongTimeString() + " " + msg + " \r\n";
                    activitiesWindow.SelectionStart = activitiesWindow.Text.Length;
                    activitiesWindow.ScrollToCaret();
                };
                activitiesWindow.Invoke(action);
            }
            else
            {
                activitiesWindow.Text += DateTime.Now.ToLongTimeString() + msg + "\r\n";
                activitiesWindow.SelectionStart = activitiesWindow.Text.Length;
                activitiesWindow.ScrollToCaret();
            }
            refreshExploits();
        }

        public void stopButton_Click(object sender, EventArgs e)
        {
            if (startButton.InvokeRequired || this.InvokeRequired || stopButton.InvokeRequired)
            {
                Action action = () =>
                {
                    startButton.Enabled = true;
                    closeButton.Enabled = true;
                    stopButton.Enabled = false;
                };
                this.Invoke(action);
            }
            else
            {
                startButton.Enabled = true;
                closeButton.Enabled = true;
                stopButton.Enabled = false;
            }

            // stop code here
            scanner.stop();
            //GUIs.SharedVariables.myTestingForm.displayOutputActivity("test has been stopped by the user");
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            dateTimeLabel.Text = DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString();
            if (Utilities.IsConnectedToInternet())
            {
                connectionStateLabel.ForeColor = Color.Green;
                connectionStateLabel.Text = "Internet access available";
            }
            else
            {
                connectionStateLabel.ForeColor = Color.Red;
                connectionStateLabel.Text = "No internet access";
            }
        }

        public void setStatus(string state)
        {
            if (this.statusStrip1.InvokeRequired)
            {
                Action action = () =>
                {
                    currentThreadLabel.Text = state;
                };
                this.Invoke(action);
            }
            else
            {
                currentThreadLabel.Text = state;
            }
            
        }

        private void TestingForm_FormClosing(object sender, FormClosingEventArgs e)
        {

        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            dataGridView1.Rows[e.RowIndex].Selected = true;
        }

        private void dataGridView1_CellContentDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {

                string usage = dataGridView1.Rows[e.RowIndex].Cells[2].Value.ToString();
                if (usage != null && usage != string.Empty)
                {
                    System.Diagnostics.Process.Start(usage);
                    //code to open browser
                    //MessageBox.Show(usage);
                }
            }
            catch (Exception) { }
        }

        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {
                int yCoord = dataGridView1.CurrentCellAddress.Y; // You can get X if you need it.
                string usage = dataGridView1.Rows[yCoord].Cells[2].Value.ToString();
                if (usage != null && usage != string.Empty)
                {
                    System.Diagnostics.Process.Start(usage);
                    //code to open browser
                    //MessageBox.Show(usage);
                }
            }
            catch (Exception) { }
        }

    }
}
