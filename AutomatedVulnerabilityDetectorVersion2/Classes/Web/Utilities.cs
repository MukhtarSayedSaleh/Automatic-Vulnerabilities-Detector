/*
 * Web Utilities Class
 * the main purpose of this class is to organize some
 * important functions(methods) in one class.
 * 
 *       Mukhtar Sayed Saleh
 *       Syria- Al_Boukamal
 *       mokhtar_ss@hotmail.com
 *       00963944467547   
 *       
 *   start date : Albokamal 9-9-2010
 *   finish date : Damascus 3-10-2010
 *   testing start date : Albokamal 9-9-2010
 *   testing finish date : Damascus 3-10-2010 
 *   
 *   two links comparing method has been added on : 19-12-2010
 *   final test : 19-12-2010 // ok
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;

namespace AutomatedVulnerabilityDetectorVersion2.Classes.Web
{
    class Utilities
    {
        // API Method
        [DllImport("wininet.dll")]
        private extern static bool InternetGetConnectedState(out int Description, int ReservedValue);

        /// <summary>
        /// checks the state of the internet connection.
        /// </summary>
        public static bool IsConnectedToInternet()
        {
            int Description;
            return InternetGetConnectedState(out Description, 0);
        }

        /// <summary>
        /// converts a relative URL to absolute URL.
        /// </summary>
        public static string relativeToAbsolute(string baseURL, string relativeURL)
        {
            var baseUri = new Uri(baseURL);
            var absoluteUri = new Uri(baseUri, relativeURL);
            return absoluteUri.ToString();
        }

        /// <summary>
        /// compares two links and return bool value that determines if they are the same or not
        /// </summary>
        public static bool compareTwoLinks(string link1, string link2, bool takeCareOfRepeatedQueryStringVars)
        {
            if (!takeCareOfRepeatedQueryStringVars)
            {
                // checking without taking care of the repeated query string vars
                // example :in this case the following two pages are not euivalent
                // http://www.site.com/page.php?a=1&b=1
                // http://www.site.com/page.php?a=2&b=1
                if (link1.CompareTo(link2) != 0)
                {
                    return false;
                }
            }
            else
            {
                // checks and take care of the repeated query string vars consider
                // the following two links as same as each other.
                // http://www.site.com/page.php?a=1&b=1
                // http://www.site.com/page.php?a=2&b=1

                string AbLink1, AbLink2;
                Dictionary<string, string> link1Vars = new Dictionary<string, string>();
                Regex queryStringVarRegex = new Regex("[^?&]*=[^?&]*");

                // get the urls.
                AbLink1 = link1.Split("?".ToCharArray())[0];
                AbLink2 = link2.Split("?".ToCharArray())[0];

                if (AbLink1.CompareTo(AbLink2) != 0)
                {
                    // they are completely different
                    return false;
                }

                // fill the dictionary with link1 vars.
                MatchCollection matches = queryStringVarRegex.Matches(link1);
                foreach (Match m in matches)
                {
                    link1Vars.Add(m.ToString().Split("=".ToCharArray())[0],
                                  m.ToString().Split("=".ToCharArray())[1]);
                }
                
                // compare with link2 vars.
                matches = queryStringVarRegex.Matches(link2);
                foreach (Match m in matches)
                {
                    try
                    {
                        if (link1Vars[m.ToString().Split("=".ToCharArray())[0]] == null ||
                           link1Vars[m.ToString().Split("=".ToCharArray())[0]] == string.Empty)
                        {
                            return false;
                        }
                    }
                    catch (KeyNotFoundException)
                    {
                        return false;
                    }
                }

            }
            return true;
        }
    }
}
