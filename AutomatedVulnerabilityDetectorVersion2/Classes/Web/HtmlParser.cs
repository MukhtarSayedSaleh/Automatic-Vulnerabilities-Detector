/*
 * HTML Parser Class
 * the main purpose of this class is to parse the html markup
 * of the pages that will be attacked>
 * 
 *       Mukhtar Sayed Saleh
 *       Syria- Al_Boukamal
 *       mokhtar_ss@hotmail.com
 *       00963944467547   
 *       
 *   start date : Albokamal 9-9-2010
 *   finish date : Damascus 15-11-2010
 *   the new edition : Damascus : 19-12-2010 
 *   
 *   
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using AutomatedVulnerabilityDetectorVersion2.Classes.Web;
namespace AutomatedVulnerabilityDetectorVersion2.Classes.Web
{
    class HtmlParser
    {
        private string pageMarkup;
        private string targetSite;

        // regular expression vars.
        private Regex m_rxArea; 
        private Regex m_rxBaseHref;
        private Regex m_rxHref;
        private Regex m_rxFrame;
        private Regex m_rxIframe;
        private Regex m_rxQueryString;
        private Regex m_rxForm;
        private Regex m_rxInputField;

        public HtmlParser(string targetSite,string pageMarkup)
        {
            this.targetSite = targetSite;
            this.pageMarkup = pageMarkup;
            
            // regular expression suitable options.
            RegexOptions rxOpt = RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.IgnoreCase;
            
            // regular expression for each html element that has a href 
            // to another web page !
            // 1-Anchores <a>
            m_rxHref = new Regex("<\\s*a\\s+[^>]*href\\s*=\\s*[\"']?(?<href>[^\"' >]+)[\"' >]", rxOpt);
            // 2-frames <frame>
            m_rxFrame = new Regex("<\\s*frame\\s+[^>]*src\\s*=\\s*[\"']?(?<href>[^\"' >]+)[\"' >]", rxOpt);
            // 3- iFrames <iframe>
            m_rxIframe = new Regex("<\\s*iframe\\s+[^>]*src\\s*=\\s*[\"']?(?<href>[^\"' >]+)[\"' >]", rxOpt);
            // 4- Areas <area>            
            m_rxArea = new Regex("<\\s*area\\s+[^>]*href\\s*=\\s*[\"']?(?<href>[^\"' >]+)[\"' >]", rxOpt);
            // 5- Base <base>
            m_rxBaseHref = new Regex("<\\s*base\\s+[^>]*href\\s*=\\s*[\"']?(?<href>[^\"' >]+)[\"' >]", rxOpt);
            // 6 - matches each query string param. with its value).
            m_rxQueryString = new Regex("[^?&]*=[^?&]*");
            // 7 - Matches all thing between <form> and </form>
            m_rxForm = new Regex("<\\s*form\\s+[^>]*action\\s*=\\s*[\"']?(?<action>[^\"' >]+)[\"' >](.*?)</form>", rxOpt);
            // 8 - Matches each input fields (<input> tag).
            m_rxInputField = new Regex("<\\s*input\\s+[^>]*name\\s*=\\s*[\"']?(?<name>[^\"' >]+)[\"' >]", rxOpt);

        }

        /// <summary>
        /// return the query string parameters of a link
        /// each array item has the format paramName=value
        /// </summary>
        public List<string> getQueryStringParams(string link)
        {
            List<string> result = new List<string>();
            MatchCollection matches = this.m_rxQueryString.Matches(link);
            foreach (Match m in matches)
            {
                // اسم و قيمة متغير الكويري سترنج هنا
                if (m.ToString() == string.Empty || m.ToString() == "")
                {
                    continue;
                }
                //إضافة اسم و قيمة الكويري سترنج
                result.Add(m.ToString());
            }
            return result;
        }

        /// <summary>
        /// returns a list of all internal links.
        /// </summary>
        public List<string> getInternalLinks()
        {
            List<string> links = new List<string>();

            //Test if the HTML contains a base href
            string strBase = string.Empty;
            Match matchBaseHref = m_rxBaseHref.Match(pageMarkup);
            if (matchBaseHref.Success)
            {
                string strHtmlBase = matchBaseHref.Groups["href"].Value.Trim();

                if (strHtmlBase.StartsWith("/"))
                {
                    strBase = this.targetSite + strHtmlBase.Substring(1);
                }
                else
                {
                    strBase = strHtmlBase;
                }
            }


            List<string> tempLinks = new List<string>();

            MatchCollection matchesHref = m_rxHref.Matches(this.pageMarkup);
            AddHrefMatches(matchesHref, ref tempLinks);

            MatchCollection matchesFrame = m_rxFrame.Matches(this.pageMarkup);
            AddHrefMatches(matchesFrame, ref tempLinks);

            MatchCollection matchesIframe = m_rxIframe.Matches(this.pageMarkup);
            AddHrefMatches(matchesIframe, ref tempLinks);

            MatchCollection matchesArea = m_rxArea.Matches(this.pageMarkup);
            AddHrefMatches(matchesArea, ref tempLinks);

            //Now we iterate through all Hyperlinks we found
            foreach (string strUrlFound in tempLinks)
            {
                string strUrlNew = strUrlFound;

                //Skip this link if it starts with ftp://, news://, mailto:,
                //javascript:
                if (IsAbsoluteUrl(strUrlNew) && !IsHttpUrl(strUrlNew))
                {
                    continue;
                }

                //Skip this link if it regers to an external site but the target.
                if (IsExternal(strUrlNew))
                {
                    continue;
                }

                //if this isn't an absolute URL
                if (!IsHttpUrl(strUrlNew))
                {
                    if (strUrlNew.StartsWith("/"))
                    {
                        if (this.targetSite.EndsWith("/"))
                        {
                            strUrlNew = this.targetSite + strUrlNew.Substring(1);
                        }
                        else
                        {
                            strUrlNew = this.targetSite + "/" + strUrlNew.Substring(1);
                        }
                    }
                    // important!
                    strUrlNew = Utilities.relativeToAbsolute(this.targetSite, strUrlNew);
                }


                //If we haven't added the URL yet to our listview do it now
                if (!links.Contains(strUrlNew))
                {
                    links.Add(strUrlNew);
                }
            }

            return links;
        }

        /// <summary>
        /// return a list of all forms attached with a list of all input fields of each form.
        /// </summary>
        public List<List<string>> getFormsInputFields()
        {
            List<List<string>> inputFields = new List<List<string>>();

            MatchCollection forms = m_rxForm.Matches(this.pageMarkup);
            foreach (Match form in forms)
            {
                List<string> currentInputs = new List<string>();
                string currentFormURL = form.Groups["action"].Value.ToString();
                if (currentFormURL != string.Empty || currentFormURL != "")
                {
                    // convert form "action" from relative to absolute
                    currentFormURL = Utilities.relativeToAbsolute(this.targetSite, currentFormURL);
                    // add it as "first" element in the list
                    currentInputs.Add(currentFormURL);
                }

                MatchCollection inputs = m_rxInputField.Matches(form.Value);
                currentInputs.AddRange(getAllFormInputs(inputs));

                // to ensure that we have no repeated input field names.
                List<string> pureCurrentInputs = new List<string>();
                foreach (string s in currentInputs)
                {
                    if (!pureCurrentInputs.Contains(s))
                    {
                        pureCurrentInputs.Add(s);
                    }
                }
                // add the list to results
                inputFields.Add(pureCurrentInputs);
            }
            return inputFields;
        }



        /// <summary>
        /// checks if a url is refers to different site than the target.
        /// </summary>
        private bool IsExternal(string url)
        {
            if (Utilities.relativeToAbsolute(this.targetSite, url).ToUpper() == url.ToUpper())
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// is strUrl http url ?
        /// </summary>
        private bool IsHttpUrl(string strUrl)
        {
            if (strUrl.ToLower().StartsWith("http://".ToLower()))
            {
                return true;
            }

            if (strUrl.ToLower().StartsWith("https://".ToLower()))
            {
                return true;
            }

            return false;
        }


        /// <summary>
        /// is strUrl javascript, ftp, mail, #, news url ?
        /// </summary>
        private bool IsJavaScriptUrl(string strUrl)
        {
            if (strUrl.ToLower().StartsWith("javascript://".ToLower()))
            {
                return true;
            }

            if (strUrl.ToLower().StartsWith("mailto:".ToLower()))
            {
                return true;
            }
            
            if (strUrl.ToLower().StartsWith("ftp://".ToLower()))
            {
                return true;
            }

            if (strUrl.ToLower().StartsWith("news://".ToLower()))
            {
                return true;
            }

            if (strUrl.ToLower().StartsWith("#".ToLower()))
            {
                return true;
            }

            return false;
        }




        /// <summary>
        /// is strUrl is absolute url ?
        /// </summary>
        protected bool IsAbsoluteUrl(string strUrl)
        {
            if (strUrl.StartsWith("http://", StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }

            if (strUrl.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }

            if (strUrl.StartsWith("mailto:", StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }

            if (strUrl.StartsWith("ftp://", StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }

            if (strUrl.StartsWith("news://", StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }

            if (strUrl.StartsWith("javascript:", StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }

            //if (strUrl.StartsWith("#", StringComparison.OrdinalIgnoreCase))
            //{
            //    return true;
            //}

            return false;
        }




        /// <summary>
        /// normalize the url
        /// </summary>
        private string NormalizeLink(string strUrl)
        {
            if (strUrl.StartsWith("http://") == false)
                strUrl = "http://" + strUrl;
            if (strUrl.IndexOf("/", 8) == -1)
                strUrl += '/';
            return strUrl;
        }

        /// <summary>
        /// add each match in matchCollection to links array.
        /// </summary>
        private void AddHrefMatches(MatchCollection matches,
                        ref List<string> links)
        {
            foreach (Match match in matches)
            {
                if (!links.Contains(match.Groups["href"].Value))
                {
                    if (match.Groups["href"].Value != string.Empty ||
                            match.Groups["href"].Value != "")
                    {
                        links.Add(match.Groups["href"].Value);
                    }
                }
            }
        }

        // get a list of certain form Input fields. 
        // it is used internally by the above method "fetchAllInputFields"
        private List<string> getAllFormInputs(MatchCollection inputs)
        {
            List<string> inputsList = new List<string>();
            Regex typeRegex = new Regex("type\\s*=\\s*[\"']?(?<type>[^\"' >]+)[\"' ]");
            foreach (Match input in inputs)
            {
                string currentInputName = input.Groups["name"].Value;
                string currentInputType = string.Empty;

                // إذا كان في الوسم تايب نقوم بجلبه
                if (typeRegex.IsMatch(input.Value))
                {
                    currentInputType = typeRegex.Match(input.Value).Groups["type"].Value;
                    //إذا كان نوع عنصر الإنبوت أحد الأنواع غير القابلة للحقن تجاهله.
                    if (currentInputType.ToLower() == "submit" ||
                         currentInputType.ToLower() == "button" ||
                         currentInputType.ToLower() == "reset")
                    {
                        continue;
                    }
                }


                if (currentInputName != string.Empty ||
                    currentInputName != "")
                {
                    inputsList.Add(currentInputName);
                }
            }

            return inputsList;
        }


    }
}
