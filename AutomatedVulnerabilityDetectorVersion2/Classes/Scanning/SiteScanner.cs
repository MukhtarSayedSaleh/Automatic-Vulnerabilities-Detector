/*
 * site scanner Class
 * the main purpose of this class is to 
 * scan all pages of specific profile(website)
 * using multi-threaded techniqe.
 * 
 *       Mukhtar Sayed Saleh
 *       Syria- Al_Boukamal
 *       mokhtar_ss@hotmail.com
 *       00963944467547   
 * 
 *   start date : 21-1-2011
 *   finish date : 22-1-2011
 *   testing start date : 
 *   testing finish date : 
 *   
 *   
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AutomatedVulnerabilityDetectorVersion2.Classes.Attacking;
using System.Threading;
using System.Data.OleDb;

namespace AutomatedVulnerabilityDetectorVersion2.Classes.Scanning
{
    class SiteScanner : AutomatedVulnerabilityDetectorVersion2.Classes.DB.SharedDbVariables
    {
        private string myConnectionString = AVD2ConnectionString;
        private int _profileID;
        private bool _xssTest, _sqlTest, _rfiTest, _deepScan;
        private bool _isPaused;
        private bool _isStoped;

        public SiteScanner(int profileID,bool xss,bool sql,bool rfi,bool deepScan)
        {
            this._profileID = profileID;
            this._xssTest = xss;
            this._sqlTest = sql;
            this._rfiTest = rfi;
            this._deepScan = deepScan;
            this._isPaused = false;
            this._isStoped = false;
        }

        public void pause()
        {
            this._isPaused = true;
        }

        public void stop()
        {
            this._isStoped = true;
        }

        public void start()
        {
            this._isPaused = false;
            this._isStoped = false;
            GUIs.SharedVariables.myTestingForm.scanThread = new Thread(newScanPhase);
            GUIs.SharedVariables.myTestingForm.scanThread.IsBackground = true;
            GUIs.SharedVariables.myTestingForm.scanThread.Start();
        }

        private void newScanPhase()
        {
            using (OleDbConnection con = new OleDbConnection(myConnectionString))
            {
                //fetch and analyse phase
                using (OleDbCommand cmd = new OleDbCommand("SELECT * FROM `page` WHERE `profileID` = ? AND (IsNull(`pageContent`) OR `pageContent`='NULL')", con))
                {
                    con.Open();
                    cmd.Parameters.AddWithValue("?", this._profileID);
                    using (OleDbDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.HasRows)
                        {
                            while (dr.Read())
                            {
                                if (_isStoped || _isPaused)
                                {
                                    threadFinished();
                                    return;
                                }
                                //fetch page content
                                GUIs.SharedVariables.myTestingForm.setStatus("fetching...");
                                Web.WebCrawler crawler = new Web.WebCrawler(dr.GetString(1));
                                DB.PagesManager pagesManager = new DB.PagesManager();
                                GUIs.SharedVariables.myTestingForm.displayOutputActivity("fetching the page : " + dr.GetString(1) + " \n\r");
                                string pageContent = crawler.fetchPage();
                                pagesManager.editPageContent(dr.GetString(1), pageContent);


                                if (_isStoped || _isPaused)
                                {
                                    threadFinished();
                                    return;
                                }


                                //analyse page
                                GUIs.SharedVariables.myTestingForm.setStatus("analaysing...");
                                GUIs.SharedVariables.myTestingForm.displayOutputActivity("analysing the page : " + dr.GetString(1) + " \n\r");
                                Web.HtmlParser parser = new Web.HtmlParser(dr.GetString(1), pageContent);
                                List<string> links = parser.getInternalLinks();
                                GUIs.SharedVariables.myTestingForm.displayOutputActivity("found (" + links.Count + ") links in the page : " + dr.GetString(1) + " \n\r");
                                foreach (string l in links)
                                {
                                    if (!pagesManager.isPageExist(l.ToLower()))
                                    {
                                        pagesManager.addPage(l.ToLower(), this._profileID.ToString(), "NULL");
                                    }
                                }
                                pagesManager.setHasAnalysed(true, dr.GetString(1));



                                if (_isStoped || _isPaused)
                                {
                                    threadFinished();
                                    return;
                                }

                                //attack page
                                GUIs.SharedVariables.myTestingForm.setStatus("attacking...");
                                FullAttack p = new FullAttack(this._profileID, dr.GetString(1), this._xssTest, this._sqlTest, this._rfiTest, this._deepScan);
                                p.attack();
                            }
                        }
                        else
                        {
                            threadFinished();
                        }
                    }
                }
            }

            newScanPhase();

        }

        private void threadFinished()
        {
            stop();
            GUIs.SharedVariables.myTestingForm.stopButton_Click(new object(), new EventArgs());
            GUIs.SharedVariables.myTestingForm.displayOutputActivity("Test has finished!");
            GUIs.SharedVariables.myTestingForm.setStatus("Ready");
            GUIs.SharedVariables.myTestingForm.scanThread.Abort();
        }

    }

}
