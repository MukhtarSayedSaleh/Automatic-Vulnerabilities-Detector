/*
 * Full Attack Class
 * the main purpose of this class is to scan
 * a webpage against the "ALL" vulnerabilities
 * with respect to scan configuration
 * 
 *       Mukhtar Sayed Saleh
 *       Syria- Al_Boukamal
 *       mokhtar_ss@hotmail.com
 *       00963944467547   
 *       
 *   start date : 6-1-2011
 *   finish date : 
 *   testing start date : 
 *   testing finish date : 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AutomatedVulnerabilityDetectorVersion2.Classes.Attacking
{
    class FullAttack
    {
        private int _profileID;
        private bool _xssTest, _sqlTest, _rfiTest,deepScan;
        private string _url;
        public FullAttack(int profileID,string pageURL, bool xss, bool sql, bool rfi,bool deepScan)
        {
            this._profileID = profileID;
            this._url = pageURL;
            this._xssTest = xss;
            this._sqlTest = sql;
            this._rfiTest = rfi;
            this.deepScan = deepScan;
        }

        public void attack()
        {
            DB.PagesManager pagesManager = new DB.PagesManager();
            SqlInjectionAttack sql = new SqlInjectionAttack(this._profileID);
            XssAttack xss = new XssAttack(this._profileID);
            RfiAttack rfi = new RfiAttack(this._profileID);
            //xss
            if (this._xssTest)
            {
                if (!this.deepScan) // normal mode
                {
                    xss.attackAllInputfields(this._url);
                    xss.attackAllQueryStrings(this._url);
                }
                else // deep scan mode
                {
                    xss.attackEachInputfield(this._url);
                    xss.attackEachQueryString(this._url);
                }
                pagesManager.setHasXSSed(true, this._url);
            }


            // sql injection
            if (this._sqlTest)
            {
                if (!this.deepScan)
                {
                    sql.attackAllInputfields(this._url);
                    sql.attackAllQueryStrings(this._url);
                }
                else
                {
                    sql.attackEachInputfield(this._url);
                    sql.attackEachQueryString(this._url);
                }
                pagesManager.setHasSQLInjection(true, this._url);
            }


            // rfi
            if (this._rfiTest)
            {
                if (!this.deepScan)
                {
                    rfi.attackAllInputfields(this._url);
                    rfi.attackAllQueryStrings(this._url);
                }
                else
                {
                    rfi.attackEachInputfield(this._url);
                    rfi.attackEachQueryString(this._url);
                }
                pagesManager.setHasRFIed(true, this._url);
            }

            // update gui
            GUIs.SharedVariables.myTestingForm.refreshExploits();
        }
    }
}
