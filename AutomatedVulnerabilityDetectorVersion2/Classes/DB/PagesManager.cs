/*
 * profile pages manager Class
 * the main purpose of this class is to 
 * add,delete,update, and manage test profiles pages
 * in the database.
 * 
 *       Mukhtar Sayed Saleh
 *       Syria- Al_Boukamal
 *       mokhtar_ss@hotmail.com
 *       00963944467547   
 * 
 *   start date : 7-9-2010
 *   finish date : 7-9-2010
 *   testing start date : 7-9-2010
 *   testing finish date : 14-10-2010 // OK
 *   
 *   
 * 
 *   !!!Converted from SQL Server to Access on 18-12-2010 for the speed
 *   and portability issues!!!
 *   
 *   final test finished : 19-12-2010 // OK
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.OleDb;
using System.Configuration;

namespace AutomatedVulnerabilityDetectorVersion2.Classes.DB
{
    class PagesManager : SharedDbVariables
    {
        private string myConnectionString = AVD2ConnectionString;

        /// <summary>
        /// varifies if page exist of not;
        /// </summary>
        public bool isPageExist(string pageURL/*,bool withQueryStringVars*/)
        {
            //if (withQueryStringVars)
            //{
            //    // checking without taking care of the repeated query string vars
            //    // example :in this case the following two pages are not euivalent
            //    // http://www.site.com/page.php?a=1&b=1
            //    // http://www.site.com/page.php?a=2&b=1
                #region case1
                try
                {
                    using (OleDbConnection con = new OleDbConnection(this.myConnectionString))
                    {
                        con.Open();
                        using (OleDbCommand cmd = new OleDbCommand("SELECT COUNT(*) FROM `page` WHERE `pageURL` = ?", con))
                        {
                            cmd.Parameters.AddWithValue("pageURL", pageURL);
                            if ((int)cmd.ExecuteScalar() > 0)
                            {
                                return true;
                            }
                            else
                            {
                                return false;
                            }
                        }
                    }
                }
                catch (Exception)
                {
                    return false;
                }
                #endregion
            //}
            //else
            //{
            //    // checking with taking care of the repeated query string vars
            //    // example :in this case the following two pages are same
            //    // http://www.site.com/page.php?a=1&b=1
            //    // http://www.site.com/page.php?a=2&b=1

            //}
        }

        /// <summary>
        /// varifies if page exist with no content or not;
        /// </summary>
        public bool isPageEmpty(string pageURL)
        {
            try
            {
                using (OleDbConnection
                    con = new OleDbConnection(this.myConnectionString))
                {
                    con.Open();
                    using (OleDbCommand cmd = new OleDbCommand("SELECT COUNT(*) FROM `page` WHERE `pageURL` = ? AND (`pageContent`='' OR IsNull(`pageContent`))", con))
                    {
                        cmd.Parameters.AddWithValue("pageURL", pageURL);
                        if ((int)cmd.ExecuteScalar() > 0)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// add new page
        /// </summary>
        public bool addPage(string pageURL, string profileID, string pageContent)
        {
            try
            {
                using (OleDbConnection con = new OleDbConnection(this.myConnectionString))
                {
                    con.Open();
                    using (OleDbCommand cmd = new OleDbCommand("INSERT INTO `page`(`pageURL`, `profileID`,`hasAnalysed`,`hasXSSed`, `hasSQLInjectioned`,`hasRFIed`,`pageContent`) VALUES (?, ?, 0, 0, 0, 0, ?)", con))
                    {
                        cmd.Parameters.AddWithValue("pageURL", pageURL);
                        cmd.Parameters.AddWithValue("profileID", profileID);
                        cmd.Parameters.AddWithValue("pageContent", pageContent);
                        cmd.ExecuteNonQuery();
                        return true;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// edit page content via URL
        /// </summary>
        public bool editPageContent(string pageURL,string pageContent)
        {
            try
            {
                using (OleDbConnection con = new OleDbConnection(this.myConnectionString))
                {
                    con.Open();
                    using (OleDbCommand cmd = new OleDbCommand("UPDATE `page` SET `pageContent`=? WHERE `pageURL`=?", con))
                    {
                        cmd.Parameters.AddWithValue("?", pageContent);
                        cmd.Parameters.AddWithValue("?", pageURL);
                        int i = (int)cmd.ExecuteNonQuery();
                        if (i > 0)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// delete the page with pageID.
        /// </summary>
        public bool deletePageViaID(string pageID)
        {
            try
            {
                using (OleDbConnection con = new OleDbConnection(this.myConnectionString))
                {
                    con.Open();
                    using (OleDbCommand cmd = new OleDbCommand("DELETE FROM `page` WHERE `pageID` = ?", con))
                    {
                        cmd.Parameters.AddWithValue("?", pageID);
                        cmd.ExecuteNonQuery();
                        return true;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// delete the page with pageUR;.
        /// </summary>
        public bool deletePageViaURL(string pageURL)
        {
            try
            {
                using (OleDbConnection con = new OleDbConnection(this.myConnectionString))
                {
                    con.Open();
                    using (OleDbCommand cmd = new OleDbCommand("DELETE FROM `page` WHERE `pageURL` = ?", con))
                    {
                        cmd.Parameters.AddWithValue("?", pageURL);
                        cmd.ExecuteNonQuery();
                        return true;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        /// <summary>
        /// sets the value of 'hasAnalysed' Field.
        /// </summary>
        public bool setHasAnalysed(bool value, string pageURL)
        {
            try
            {
                using (OleDbConnection con = new OleDbConnection(this.myConnectionString))
                {
                    con.Open();
                    using (OleDbCommand cmd = new OleDbCommand("UPDATE `page` SET `hasAnalysed`= ? WHERE `pageURL` = ?", con))
                    {
                        cmd.Parameters.AddWithValue("?", value);
                        cmd.Parameters.AddWithValue("?", pageURL);
                        cmd.ExecuteNonQuery();
                        return true;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }
         
        /// <summary>
        /// sets the value of 'xssTest' Field.
        /// </summary>
        public bool setHasXSSed(bool value, string pageURL)
        {
            try
            {
                using (OleDbConnection con = new OleDbConnection(this.myConnectionString))
                {
                    con.Open();
                    using (OleDbCommand cmd = new OleDbCommand("UPDATE `page` SET `hasXSSed` = ? WHERE `pageURL` = ?", con))
                    {
                        cmd.Parameters.AddWithValue("?", value);
                        cmd.Parameters.AddWithValue("?", pageURL);
                        cmd.ExecuteNonQuery();
                        return true;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// sets the value of 'SQLInjectionTest' Field.
        /// </summary>
        public bool setHasSQLInjection(bool value, string pageURL)
        {
            try
            {
                using (OleDbConnection con = new OleDbConnection(this.myConnectionString))
                {
                    con.Open();
                    using (OleDbCommand cmd = new OleDbCommand("UPDATE `page` SET `hasSQLInjectioned` = ? WHERE `pageURL` = ?", con))
                    {
                        cmd.Parameters.AddWithValue("?", value);
                        cmd.Parameters.AddWithValue("?", pageURL);
                        cmd.ExecuteNonQuery();
                        return true;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// sets the value of 'DirBrowsingTest' Field.
        /// </summary>
        public bool setHasRFIed(bool value, string pageURL)
        {
            try
            {
                using (OleDbConnection con = new OleDbConnection(this.myConnectionString))
                {
                    con.Open();
                    using (OleDbCommand cmd = new OleDbCommand("UPDATE `page` SET `hasRFIed` = ? WHERE `pageURL` = ?", con))
                    {
                        cmd.Parameters.AddWithValue("?", value);
                        cmd.Parameters.AddWithValue("?", pageURL);
                        cmd.ExecuteNonQuery();
                        return true;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

    }
}
